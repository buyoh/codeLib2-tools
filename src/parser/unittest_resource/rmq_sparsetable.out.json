{
  "title": "SparseTable(区間最小)",
  "overview": "構築済みの配列に対して，次のクエリを処理できる．\n- 区間の最小値を計算する．\n0-indexedで，[begin,end)．beginを含み，endを含まない．\n何度も加減算を繰り返すと内部でオーバーフローを起こす可能性．\nO(log^2N)．最大値のみの機能なら出来そう．[TODO]",
  "code": "template <typename T>\nclass SparseTable {\n public:\n  int size;\n  vector<int> log2;\n  vector<T> data;\n  vector<T> dp;\n\n  SparseTable(int size) : size(size), log2(size + 1), data(size) {\n    // for fast calculate log2\n    for (int i = 2; i <= size; ++i) {\n      log2[i] = log2[i >> 1] + 1;\n    }\n\n    dp.resize(size * (log2[size] + 1));\n  }\n\n  inline T& operator[](size_t i) { return data[i]; }\n  inline T operator[](size_t i) const { return data[i]; }\n\n  void build() {\n    int l, i, f, b;\n    for (i = 0; i < size; i++) {\n      dp[i] = i;\n    }\n    for (l = 1; (1 << l) <= size; l++) {\n      for (i = 0; i + (1 << l) <= size; i++) {\n        f = dp[i + size * (l - 1)];\n        b = dp[(i + (1 << (l - 1))) + size * (l - 1)];\n\n        dp[i + size * l] = (data[f] <= data[b]) ? f : b;  // minimum\n      }\n    }\n  }\n\n  // range [l,r)\n  int getminrangeIdx(int l, int r) const {\n    int lg = log2[r - l];\n    int i1 = dp[l + size * lg];\n    int i2 = dp[r - (1 << lg) + size * lg];\n    return (data[i1] <= data[i2]) ? i1 : i2;  // minimum\n  }\n};",
  "lang": "cpp",
  "path": "/src/cpp/container/likermq/rmq_sparsetable.hpp",
  "require": "#include <vector>\nusing namespace std;",
  "references": [
    "http://tookunn.hatenablog.com/entry/2016/07/13/211148"
  ],
  "words": [

  ],
  "verified": [
    "http://yukicoder.me/submissions/172470"
  ],
  "commits": [
    {
      "sha": "1703cfd5937491aed191816ef0f1d37908630f24",
      "date": "2020-06-28 03:09:01 +0900",
      "message": "Add include guard and Modify document formats (#64)"
    },
    {
      "sha": "ece0b45f2a0f37c91fece075aebbcf5b39cfd902",
      "date": "2020-06-24 00:23:28 +0900",
      "message": "rename cpp to hpp (#62)"
    }
  ],
  "tested_by": [

  ]
}